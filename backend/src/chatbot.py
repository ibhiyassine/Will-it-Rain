import pandas as pd
import os
from google import genai
from google.genai import types
from env import ENV

environment = ENV.getInstance()

class ChatBot:

    chatInstance = None

    def __init__(self):
        # The client gets the API key from the environment variable `GEMINI_API_KEY`.
        self.client = genai.Client()
        # The ChatbotTemplate.txt file contains the prompt template generated by ChatGPT. Until we change it.
        base_dir = os.path.dirname(__file__)  
        template_path = os.path.join(base_dir, "ChatbotTemplate.txt")

        with open(template_path, "r") as template:
            self._template = template.read()

    
    def generatePrompt(self, prediction : pd.DataFrame, activity : str) -> str:
        """
        @params:
            - prediction : a map / pandas dataframe that contains the ("parameter", [prediction]) key-value pair
            - activity : a string that refers to the activity desired, or that the person desires the model to pick an activity.
            auto means auto activity

        @returns:
            - a string that corresponds to the content of the prompt to be fed to the model
        """

        # Build the structured prompt
        prompt = "You are an assistant that suggests activities based on environmental and weather conditions.\n\n"
        prompt += "Input Data:\n"

        for key, value in prediction.items():
            prompt += f"- {key}: {value}\n"

        if activity and activity.lower() != "auto":
            prompt += f"""
                        Mode: Evaluate my activity
                        Activity: {activity}
                        """
        else:
            prompt += """
                    Mode: Suggest activities
                    """

        return prompt.strip()


    def askBot(self, prediction, activity):
        """
        @params:
            - prediction : a map / pandas dataframe that contains the ("parameter", [prediction]) key-value pair
            - activity : a string that refers to the activity desired, or that the person desires the model to pick an activity.

        @returns:
            - a string that corresponds to the response of the model with respect to the data provided.
        """
        prompt = self.generatePrompt(prediction, activity)
        response = self.client.models.generate_content(
            model="gemini-2.5-flash", 
            contents= prompt,
            config=types.GenerateContentConfig(
                thinking_config=types.ThinkingConfig(thinking_budget=0), # Disable thinking
                system_instruction=self._template
            ),
        )
        # BEWARE : No safety checking here.
        return response.text

    def testPrompt(self):
        response = self.client.models.generate_content(
            model="gemini-2.5-flash",
            contents="How does AI work?",
            config=types.GenerateContentConfig(
                thinking_config=types.ThinkingConfig(thinking_budget=0) # Disables thinking
            ),
        )
        print(response.text)

    @classmethod
    def getInstance(cls):
        if cls.chatInstance is None:
            cls.chatInstance = ChatBot()
        return cls.chatInstance
